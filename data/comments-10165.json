[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004332275",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10165#issuecomment-1004332275",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10165",
        "id": 1004332275,
        "node_id": "IC_kwDOCVq1mM473OTz",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-03T20:15:23Z",
        "updated_at": "2022-01-03T20:15:23Z",
        "author_association": "MEMBER",
        "body": "ONNX Runtime has added double (float64) type support to Clip only in opset 12. It is not according to the standard; however, it is not unusual. We sometimes choose not to support some types to save on binary size. I doubt that there would be a minor release to address this.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004332275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004456503",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10165#issuecomment-1004456503",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10165",
        "id": 1004456503,
        "node_id": "IC_kwDOCVq1mM473so3",
        "user": {
            "login": "ganler",
            "id": 38074777,
            "node_id": "MDQ6VXNlcjM4MDc0Nzc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/38074777?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ganler",
            "html_url": "https://github.com/ganler",
            "followers_url": "https://api.github.com/users/ganler/followers",
            "following_url": "https://api.github.com/users/ganler/following{/other_user}",
            "gists_url": "https://api.github.com/users/ganler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ganler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ganler/subscriptions",
            "organizations_url": "https://api.github.com/users/ganler/orgs",
            "repos_url": "https://api.github.com/users/ganler/repos",
            "events_url": "https://api.github.com/users/ganler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ganler/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-04T01:01:59Z",
        "updated_at": "2022-01-04T01:04:45Z",
        "author_association": "NONE",
        "body": "Thanks for your reply.\r\n\r\nI see. It makes sense that we don't want to spend extra binary size on old specifications though it makes old stuff incomplete. \r\n\r\nBut I do see that it seems some operators can easily achieve spec-complete support w/o extra binary-size overhead. For example (clip opset 11 v.s. 12 in my example):\r\n\r\nhttps://github.com/microsoft/onnxruntime/blob/e9ffcfa24741e4a37dae161b4c81e09b75187156/onnxruntime/core/providers/cpu/math/clip.cc#L20-L27\r\n\r\nIt seems that operators from different opsets can depend on the same kernel function.\r\n\r\nI am happy to take some time to help investigate and contribute more \"free\" completeness in ORT. :-)",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004456503/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004501417",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10165#issuecomment-1004501417",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10165",
        "id": 1004501417,
        "node_id": "IC_kwDOCVq1mM4733mp",
        "user": {
            "login": "ganler",
            "id": 38074777,
            "node_id": "MDQ6VXNlcjM4MDc0Nzc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/38074777?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ganler",
            "html_url": "https://github.com/ganler",
            "followers_url": "https://api.github.com/users/ganler/followers",
            "following_url": "https://api.github.com/users/ganler/following{/other_user}",
            "gists_url": "https://api.github.com/users/ganler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ganler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ganler/subscriptions",
            "organizations_url": "https://api.github.com/users/ganler/orgs",
            "repos_url": "https://api.github.com/users/ganler/repos",
            "events_url": "https://api.github.com/users/ganler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ganler/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-04T03:24:04Z",
        "updated_at": "2022-01-04T03:24:04Z",
        "author_association": "NONE",
        "body": "compiler should be smart enough to avoid binary size exploding for templated func with the same signature. after enable such kind of data type, binary size does not really grow (only 8 byte diff as is shown in the pic).\r\n\r\n![image](https://user-images.githubusercontent.com/38074777/148005512-8bc17d04-889a-4c7e-8f41-eb11c43666bd.png)",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1004501417/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1005080938",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10165#issuecomment-1005080938",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10165",
        "id": 1005080938,
        "node_id": "IC_kwDOCVq1mM476FFq",
        "user": {
            "login": "yuslepukhin",
            "id": 11303988,
            "node_id": "MDQ6VXNlcjExMzAzOTg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11303988?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yuslepukhin",
            "html_url": "https://github.com/yuslepukhin",
            "followers_url": "https://api.github.com/users/yuslepukhin/followers",
            "following_url": "https://api.github.com/users/yuslepukhin/following{/other_user}",
            "gists_url": "https://api.github.com/users/yuslepukhin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yuslepukhin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yuslepukhin/subscriptions",
            "organizations_url": "https://api.github.com/users/yuslepukhin/orgs",
            "repos_url": "https://api.github.com/users/yuslepukhin/repos",
            "events_url": "https://api.github.com/users/yuslepukhin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yuslepukhin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-04T18:49:19Z",
        "updated_at": "2022-01-04T18:49:19Z",
        "author_association": "MEMBER",
        "body": "Not all of the compilers are equally smart. In general, the amount of code duplication depends on the amount of type dependent code and also the amount of type independent code that is *not* placed in the templated functions. In case of the `Clip`, the general implementation size saves the day although the whole op is unfortunately type dependent. We have applied certain techniques that reduce such code, based on the type size or, if the op is generic enough, such as being reduced to memcpy, we can do it a type independed code.\r\n\r\nThe overall approach taken for mobile and other size constrained environments is through typelists and configuration files. This allows to create custom builds that support only specifics ops with specific types. Fixed hash values for kernels are a part of this system that produces optimized `ORT` format model files.\r\n\r\nYou may want to [read up this](https://github.com/microsoft/onnxruntime/blob/master/docs/Reduced_Operator_Kernel_build.md).\r\n\r\nClip implementation features type lists you will want to inspect the usage of that and how that works with the reduced builds and the configuration. This relies on linker's ability on all platforms to remove dead code.\r\n\r\nThis constrains the changes you can make to previous versions of the product. @edgchen1 that commented on your PR is an expert in the area.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1005080938/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1006117522",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10165#issuecomment-1006117522",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10165",
        "id": 1006117522,
        "node_id": "IC_kwDOCVq1mM47-CKS",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-05T22:10:04Z",
        "updated_at": "2022-01-05T22:10:04Z",
        "author_association": "MEMBER",
        "body": "What's the production use case for a model that uses double and Clip? We generally add support for this sort of thing if there's a real world scenario that requires it. If we implemented support for every type in the onnx spec, a) we'd spend a lot of time doing so and maintaining the code for things that are not required and used in production scenarios, and b) the binary size would be massively larger. \r\n\r\nUnless you absolutely need the accuracy of double, the cost in model size and execution (memory usage and execution time) of using double is significantly higher than float. \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1006117522/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]