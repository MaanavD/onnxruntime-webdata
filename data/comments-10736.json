[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1057288348",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10736#issuecomment-1057288348",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10736",
        "id": 1057288348,
        "node_id": "IC_kwDOCVq1mM4_BPCc",
        "user": {
            "login": "dawnmy",
            "id": 497428,
            "node_id": "MDQ6VXNlcjQ5NzQyOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/497428?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dawnmy",
            "html_url": "https://github.com/dawnmy",
            "followers_url": "https://api.github.com/users/dawnmy/followers",
            "following_url": "https://api.github.com/users/dawnmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/dawnmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dawnmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dawnmy/subscriptions",
            "organizations_url": "https://api.github.com/users/dawnmy/orgs",
            "repos_url": "https://api.github.com/users/dawnmy/repos",
            "events_url": "https://api.github.com/users/dawnmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dawnmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-02T19:15:11Z",
        "updated_at": "2022-03-02T19:15:11Z",
        "author_association": "NONE",
        "body": "When invoked with python -m trace --trace:\r\n```\r\ndetect_cpu.py(71):             cd, self.config['state_file'][model_file_ext]).replace('.pth', '.onnx')\r\ndetect_cpu.py(70):         self.model_file = os.path.join(\r\ndetect_cpu.py(74):         so = onnxruntime.SessionOptions()\r\ndetect_cpu.py(77):         so.graph_optimization_level = onnxruntime.GraphOptimizationLevel.ORT_ENABLE_ALL\r\ndetect_cpu.py(79):         self.model = onnxruntime.InferenceSession(self.model_file, so)\r\n --- modulename: onnxruntime_inference_collection, funcname: __init__\r\nonnxruntime_inference_collection.py(315):         Session.__init__(self)\r\n --- modulename: onnxruntime_inference_collection, funcname: __init__\r\nonnxruntime_inference_collection.py(104):         self._sess = None\r\nonnxruntime_inference_collection.py(105):         self._enable_fallback = True\r\nonnxruntime_inference_collection.py(317):         if isinstance(path_or_bytes, str):\r\nonnxruntime_inference_collection.py(318):             self._model_path = path_or_bytes\r\nonnxruntime_inference_collection.py(319):             self._model_bytes = None\r\nonnxruntime_inference_collection.py(326):         self._sess_options = sess_options\r\nonnxruntime_inference_collection.py(327):         self._sess_options_initial = sess_options\r\nonnxruntime_inference_collection.py(328):         self._enable_fallback = True\r\nonnxruntime_inference_collection.py(329):         self._read_config_from_model = os.environ.get('ORT_LOAD_CONFIG_FROM_MODEL') == '1'\r\n --- modulename: _collections_abc, funcname: get\r\n_collections_abc.py(659):         try:\r\n_collections_abc.py(660):             return self[key]\r\n --- modulename: os, funcname: __getitem__\r\nos.py(671):         try:\r\nos.py(672):             value = self._data[self.encodekey(key)]\r\n --- modulename: os, funcname: encode\r\nos.py(749):             if not isinstance(value, str):\r\nos.py(751):             return value.encode(encoding, 'surrogateescape')\r\nos.py(673):         except KeyError:\r\nos.py(675):             raise KeyError(key) from None\r\n_collections_abc.py(661):         except KeyError:\r\n_collections_abc.py(662):             return default\r\nonnxruntime_inference_collection.py(332):         disabled_optimizers = kwargs['disabled_optimizers'] if 'disabled_optimizers' in kwargs else None\r\nonnxruntime_inference_collection.py(334):         try:\r\nonnxruntime_inference_collection.py(335):             self._create_inference_session(providers, provider_options, disabled_optimizers)\r\n --- modulename: onnxruntime_inference_collection, funcname: _create_inference_session\r\nonnxruntime_inference_collection.py(347):         available_providers = C.get_available_providers()\r\nonnxruntime_inference_collection.py(350):         if 'TensorrtExecutionProvider' in available_providers:\r\nonnxruntime_inference_collection.py(353):             self._fallback_providers = ['CPUExecutionProvider']\r\nonnxruntime_inference_collection.py(356):         providers, provider_options = check_and_normalize_provider_args(providers,\r\nonnxruntime_inference_collection.py(357):                                                                         provider_options,\r\nonnxruntime_inference_collection.py(358):                                                                         available_providers)\r\nonnxruntime_inference_collection.py(356):         providers, provider_options = check_and_normalize_provider_args(providers,\r\n --- modulename: onnxruntime_inference_collection, funcname: check_and_normalize_provider_args\r\nonnxruntime_inference_collection.py(48):     if providers is None:\r\nonnxruntime_inference_collection.py(49):         return [], []\r\nonnxruntime_inference_collection.py(359):         if providers == [] and len(available_providers) > 1:\r\nonnxruntime_inference_collection.py(366):         session_options = self._sess_options if self._sess_options else C.get_default_session_options()\r\nonnxruntime_inference_collection.py(367):         if self._model_path:\r\nonnxruntime_inference_collection.py(368):             sess = C.InferenceSession(session_options, self._model_path, True, self._read_config_from_model)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1057288348/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1060644639",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10736#issuecomment-1060644639",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10736",
        "id": 1060644639,
        "node_id": "IC_kwDOCVq1mM4_OCcf",
        "user": {
            "login": "dawnmy",
            "id": 497428,
            "node_id": "MDQ6VXNlcjQ5NzQyOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/497428?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dawnmy",
            "html_url": "https://github.com/dawnmy",
            "followers_url": "https://api.github.com/users/dawnmy/followers",
            "following_url": "https://api.github.com/users/dawnmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/dawnmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dawnmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dawnmy/subscriptions",
            "organizations_url": "https://api.github.com/users/dawnmy/orgs",
            "repos_url": "https://api.github.com/users/dawnmy/repos",
            "events_url": "https://api.github.com/users/dawnmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dawnmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-07T12:38:53Z",
        "updated_at": "2022-03-07T12:38:53Z",
        "author_association": "NONE",
        "body": "Seems to be solved by set \r\n```\r\nso.intra_op_num_threads = 1\r\nso.inter_op_num_threads = 1\r\n```\r\nand SLURM `--cpus-per-task <num_cpus> --threads-per-core 1`",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1060644639/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]