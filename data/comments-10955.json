[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1074475584",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1074475584",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1074475584,
        "node_id": "IC_kwDOCVq1mM5ACzJA",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-21T22:17:14Z",
        "updated_at": "2022-03-21T22:17:14Z",
        "author_association": "MEMBER",
        "body": "Why /workspace/ort-769aa83/lib was added to LD_LIBRARY_PATH, why is it needed? ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1074475584/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1074481525",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1074481525",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1074481525,
        "node_id": "IC_kwDOCVq1mM5AC0l1",
        "user": {
            "login": "rakib-hasan",
            "id": 1003393,
            "node_id": "MDQ6VXNlcjEwMDMzOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1003393?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rakib-hasan",
            "html_url": "https://github.com/rakib-hasan",
            "followers_url": "https://api.github.com/users/rakib-hasan/followers",
            "following_url": "https://api.github.com/users/rakib-hasan/following{/other_user}",
            "gists_url": "https://api.github.com/users/rakib-hasan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rakib-hasan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rakib-hasan/subscriptions",
            "organizations_url": "https://api.github.com/users/rakib-hasan/orgs",
            "repos_url": "https://api.github.com/users/rakib-hasan/repos",
            "events_url": "https://api.github.com/users/rakib-hasan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rakib-hasan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-21T22:24:54Z",
        "updated_at": "2022-03-21T22:24:54Z",
        "author_association": "NONE",
        "body": "With the steps 3-4 above, you should have two different ORT installs. Steps 5 and 7 are just trying to set up which binaries to use. Step 6 is using the libs from Step 5 and Step 8 is using the libs from Step 7.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1074481525/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1076837002",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1076837002",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1076837002,
        "node_id": "IC_kwDOCVq1mM5ALzqK",
        "user": {
            "login": "RandySheriffH",
            "id": 48490400,
            "node_id": "MDQ6VXNlcjQ4NDkwNDAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/48490400?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RandySheriffH",
            "html_url": "https://github.com/RandySheriffH",
            "followers_url": "https://api.github.com/users/RandySheriffH/followers",
            "following_url": "https://api.github.com/users/RandySheriffH/following{/other_user}",
            "gists_url": "https://api.github.com/users/RandySheriffH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RandySheriffH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RandySheriffH/subscriptions",
            "organizations_url": "https://api.github.com/users/RandySheriffH/orgs",
            "repos_url": "https://api.github.com/users/RandySheriffH/repos",
            "events_url": "https://api.github.com/users/RandySheriffH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RandySheriffH/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-23T21:26:55Z",
        "updated_at": "2022-03-24T05:17:29Z",
        "author_association": "MEMBER",
        "body": "From my end, this is where the diff emerges - https://github.com/microsoft/onnxruntime/commit/d07a2377b10add786e9ed10fed97918af96004e9\r\n@edgchen1 ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1076837002/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1077975651",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1077975651",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1077975651,
        "node_id": "IC_kwDOCVq1mM5AQJpj",
        "user": {
            "login": "rakib-hasan",
            "id": 1003393,
            "node_id": "MDQ6VXNlcjEwMDMzOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1003393?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rakib-hasan",
            "html_url": "https://github.com/rakib-hasan",
            "followers_url": "https://api.github.com/users/rakib-hasan/followers",
            "following_url": "https://api.github.com/users/rakib-hasan/following{/other_user}",
            "gists_url": "https://api.github.com/users/rakib-hasan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rakib-hasan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rakib-hasan/subscriptions",
            "organizations_url": "https://api.github.com/users/rakib-hasan/orgs",
            "repos_url": "https://api.github.com/users/rakib-hasan/repos",
            "events_url": "https://api.github.com/users/rakib-hasan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rakib-hasan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-24T19:16:03Z",
        "updated_at": "2022-03-24T19:16:41Z",
        "author_association": "NONE",
        "body": "@RandySheriffH Apologies for the late reply. Not seeing your other comment anymore but here is my (possibly outdated) response: I tried the faulty commit (769aa83) on TRT 21.08 container which has cuda-11.4 and still ran into the same issue.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1077975651/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1079425142",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1079425142",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1079425142,
        "node_id": "IC_kwDOCVq1mM5AVrh2",
        "user": {
            "login": "rakib-hasan",
            "id": 1003393,
            "node_id": "MDQ6VXNlcjEwMDMzOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1003393?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rakib-hasan",
            "html_url": "https://github.com/rakib-hasan",
            "followers_url": "https://api.github.com/users/rakib-hasan/followers",
            "following_url": "https://api.github.com/users/rakib-hasan/following{/other_user}",
            "gists_url": "https://api.github.com/users/rakib-hasan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rakib-hasan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rakib-hasan/subscriptions",
            "organizations_url": "https://api.github.com/users/rakib-hasan/orgs",
            "repos_url": "https://api.github.com/users/rakib-hasan/repos",
            "events_url": "https://api.github.com/users/rakib-hasan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rakib-hasan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-25T20:51:41Z",
        "updated_at": "2022-03-25T20:51:41Z",
        "author_association": "NONE",
        "body": "According to @jywu-msft , it seems the issue is due to a recent commit (d07a237) that enforces Ort::Env object to be created only once in a process and only destroyed when ORT is not needed anymore (e.g. process exits). Closing this issue based on that but please feel free to reopen if there is any follow up needed.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1079425142/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1079586846",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/10955#issuecomment-1079586846",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/10955",
        "id": 1079586846,
        "node_id": "IC_kwDOCVq1mM5AWTAe",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-26T03:34:58Z",
        "updated_at": "2022-03-26T05:23:22Z",
        "author_association": "MEMBER",
        "body": "Add some background: (I write it here in case I will forget it too)\r\n\r\nIn provider_host_api.h you can see each pluggable provider must implement a Shutdown() function. Please onnxruntime::Provider represent a  DLL(or shared library), it is not an EP.  The shutdown function is called when OrtEnv is closed, so that we can ensure the all the dynamically loaded EP will be unloaded before the core framework is unloaded from the system. It makes sense, because EP depends on the core framework, not vice versa. If the EP dll didn't have any global variable that depends on the ORT core framework, then we don't need to worry about it. But it is too ideal.  \r\n\r\nOn windows we say an executable file links to (or loads) a DLL in one of two ways:\r\n\r\n1. Implicit linking, where the operating system loads the DLL at the same time as the executable that uses it. The client executable calls the exported functions of the DLL the same way as if the functions were statically linked and contained within the executable. Implicit linking is sometimes referred to as static load or load-time dynamic linking.\r\n\r\n2. Explicit linking, where the operating system loads the DLL on demand at runtime. An executable that uses a DLL by explicit linking **must explicitly load and unload the DLL.** It must also set up a function pointer to access each function it uses from the DLL. Unlike calls to functions in a statically linked library or an implicitly linked DLL, the client executable must call the exported functions in an explicitly linked DLL through function pointers. Explicit linking is sometimes referred to as dynamic load or run-time dynamic linking.\r\n\r\nWhen Implicit linking is used, operating system knows the dependency relationship, it can help handle it. It won't unload DLLs in wrong order.  But, in our case if we want to use Implicit linking we will need to extract the core framework to a  separated DLL like onnxruntime_framework.dll. And it will have some limitations that we didn't want.\r\n\r\nSo we went to the \"explicit linking\" road. Not only we must explicitly load EP DLLs, we also need to explicitly clean their global variables and unload them. Thus we added the shutdown function. However, there could be a mismatch between how many times load/unload happens and how many times Provider::Shutdown() was called.  For two reasons:\r\n1. People may forget to delete ort env. In this case all DLLs will still be unloaded but it will be done in a wrong order and could crash.\r\n2.  Sometimes when you call dlclose() , the shared lib won't be unloaded immediately. Because the refcount hasn't reached to 0 yet, or the shared library was built with \"-Wl,-z,nodelete\", or simply because [it uses \"inline\" keyword](https://bugzilla.redhat.com/show_bug.cgi?id=1215452). \r\n\r\nSo there would be a chance that:\r\n1. A global variable is initialized when the DLL is loaded\r\n2. Then it get cleaned when  Provider::Shutdown() is called. But the DLL is not unloaded\r\n3. Then someone tries to use the DLL and the global variable again, You will find the global variable is not initialized (because it has been cleaned by the Shutdown() call )\r\n\r\nThe old ONNX Runtime code works because every time when it tries to access CUDA EP's kernel registry, it tests if the registry is initialized or not. If it is not initialized, do it now. However, such code is not thread-safe.  In order to make it thread-safe, we need to acquire a mutex before testing if the registry is initialized. Luckily OrtMutex doesn't have a constructor/destructor. So it is possible to add such a check at the beginning of Provider::Shutdown()'s function body. At least we can tell people if Provider::Shutdown()  was invoked more than once. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/1079586846/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]