[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638917049",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-638917049",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 638917049,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzODkxNzA0OQ==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-04T15:15:42Z",
        "updated_at": "2020-06-04T15:15:42Z",
        "author_association": "MEMBER",
        "body": "Hi,\r\n\r\nI'm not it can be fixed. The skl pipeline goes from ``float --> normalize --> double --> RF --> double``. The onnx pipeline does ``float --> normalize --> float --> RF --> float``. You can get more information about what it is complex here:\r\n\r\nhttp://www.xavierdupre.fr/app/mlprodict/helpsphinx/notebooks/onnx_float_double_skl_decision_trees.html\r\n\r\nThe onnx spec does not support double coefficient for TreeEnsembleRegressor so I used a runtime supporting double for the node TreeEnsembleRegressor and checked there was discrepencies and reused your script (see below).\r\n\r\nOne direction I can suggest is to train the normalizer, convert into onnx then compute the output, then train the RandomForestRegressor based on the new output. There should not be any discrepencies. I can write some code if you are interested.\r\n\r\n```\r\nimport os\r\nimport onnx\r\nimport pickle\r\nimport numpy as np\r\nimport pandas as pd\r\nimport onnxruntime as rt\r\nfrom math import sqrt\r\nfrom onnx import helper\r\nfrom skl2onnx import convert_sklearn\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.metrics import mean_squared_error\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nfrom skl2onnx.common.data_types import FloatTensorType\r\n\r\ndata = pd.read_csv(\"model10.csv\")\r\ndata[['SegmentTravelTime',\r\n      'NumberOfPassengers',\r\n      'BookingHour',\r\n      'TripFirstTravelDateHour',\r\n      'SegmentFirstTravelDateHour',\r\n      'TripDays',\r\n      'DaysBetweenLoggedandTripDate',\r\n      'DaysBetweenLoggedandSegmentDate',\r\n      'DaysBetweenLoggedandNextFlight',\r\n      'TotalFare',\r\n      'PredictedValue']] = data[['SegmentTravelTime',\r\n                                 'NumberOfPassengers',\r\n                                 'BookingHour',\r\n                                 'TripFirstTravelDateHour',\r\n                                 'SegmentFirstTravelDateHour',\r\n                                 'TripDays',\r\n                                 'DaysBetweenLoggedandTripDate',\r\n                                 'DaysBetweenLoggedandSegmentDate',\r\n                                 'DaysBetweenLoggedandNextFlight',\r\n                                 'TotalFare',\r\n                                 'PredictedValue']].astype(np.float32)\r\ndata_y = data['PredictedValue']\r\ndata_x = data[['SegmentTravelTime',\r\n               'NumberOfPassengers',\r\n               'BookingHour',\r\n               'TripFirstTravelDateHour',\r\n               'SegmentFirstTravelDateHour',\r\n               'TripDays',\r\n               'DaysBetweenLoggedandTripDate',\r\n               'DaysBetweenLoggedandSegmentDate',\r\n               'DaysBetweenLoggedandNextFlight',\r\n               'TotalFare']]\r\n\r\nmodel = Pipeline([\r\n    ('numeric', StandardScaler()),\r\n    ('model', RandomForestRegressor(n_estimators=100))\r\n])\r\nmodel.fit(data_x, data_y)\r\npkl_filename = \"model10.pkl\"\r\nwith open(pkl_filename, 'wb') as file:\r\n    pickle.dump(model, file)\r\n\r\n\r\ndef predict_onnx(x, dtype=np.float32):\r\n    inputs = {\r\n        'SegmentTravelTime': np.array(x['SegmentTravelTime'], dtype=dtype).reshape(1, 1),\r\n        'NumberOfPassengers': np.array(x['NumberOfPassengers'], dtype=dtype).reshape(1, 1),\r\n        'BookingHour': np.array(x['BookingHour'], dtype=dtype).reshape(1, 1),\r\n        'TripFirstTravelDateHour': np.array(x['TripFirstTravelDateHour'], dtype=dtype).reshape(1, 1),\r\n        'SegmentFirstTravelDateHour': np.array(x['SegmentFirstTravelDateHour'], dtype=dtype).reshape(1, 1),\r\n        'TripDays': np.array(x['TripDays'], dtype=dtype).reshape(1, 1),\r\n        'DaysBetweenLoggedandTripDate': np.array(x['DaysBetweenLoggedandTripDate'], dtype=dtype).reshape(1, 1),\r\n        'DaysBetweenLoggedandSegmentDate': np.array(x['DaysBetweenLoggedandSegmentDate'], dtype=dtype).reshape(1, 1),\r\n        'DaysBetweenLoggedandNextFlight': np.array(x['DaysBetweenLoggedandNextFlight'], dtype=dtype).reshape(1, 1),\r\n        'TotalFare': np.array(x['TotalFare'], dtype=dtype).reshape(1, 1)\r\n    }\r\n    return inputs\r\n\r\n\r\n# converting to onnx\r\n\r\ndef get_inputs(dtype):\r\n    inputs = [('SegmentTravelTime', FloatTensorType(shape=[1, 1])),\r\n              ('NumberOfPassengers', FloatTensorType(shape=[1, 1])),\r\n              ('BookingHour', FloatTensorType(shape=[1, 1])),\r\n              ('TripFirstTravelDateHour', FloatTensorType(shape=[1, 1])),\r\n              ('SegmentFirstTravelDateHour', FloatTensorType(shape=[1, 1])),\r\n              ('TripDays', FloatTensorType(shape=[1, 1])),\r\n              ('DaysBetweenLoggedandTripDate', FloatTensorType(shape=[1, 1])),\r\n              ('DaysBetweenLoggedandSegmentDate', FloatTensorType(shape=[1, 1])),\r\n              ('DaysBetweenLoggedandNextFlight', FloatTensorType(shape=[1, 1])),\r\n              ('TotalFare', FloatTensorType(shape=[1, 1]))]\r\n    return inputs\r\n\r\nuse_64 = True\r\nif use_64:\r\n    from mlprodict.onnx_conv import to_onnx\r\n    from skl2onnx.common.data_types import DoubleTensorType\r\n    inputs = get_inputs(DoubleTensorType)\r\n    dtype = np.float64\r\n    onnx_model = to_onnx(model, initial_types=inputs,\r\n                         rewrite_ops=True, dtype=dtype)\r\nelse:\r\n    inputs = get_inputs(FloatTensorType)\r\n    dtype = np.float32\r\n    onnx_model = convert_sklearn(model, 'rf_model', inputs)\r\n\r\nfor line in str(onnx_model).split('\\n'):\r\n    if 'Tree' in line:\r\n        print(\"ONNX model: '{}'.\".format(line))\r\n    \r\n# getting skl predicted values\r\nfor c in data_x.columns:\r\n    data_x = data_x.astype(dtype)\r\nprint(data_x.dtypes)\r\nskl_PredictedValue = pd.DataFrame(model.predict(data_x),\r\n                                  columns=['skl_PredictedValue'])\r\ndata = data.drop([\"skl_PredictedValue\"], axis=1)\r\ndata = pd.concat([data.reset_index(drop=True), skl_PredictedValue], axis=1)\r\n\r\nwith open(\"model10.onnx\", 'wb') as file:\r\n    file.write(onnx_model.SerializeToString())\r\nwith open(\"model10.txt\", 'w') as file:\r\n    file.write(str(onnx_model))\r\n\r\n\r\n# getting onnx predicted values\r\nuse_pyrt = True\r\nif use_pyrt:\r\n    name = \"\"\r\n    from mlprodict.onnxrt import OnnxInference\r\n    oinf = OnnxInference('model10.onnx')\r\n    name = \"variable1\"\r\n    fct = lambda x, verbose=0, fLOG=None: oinf.run(\r\n        predict_onnx(x, dtype=dtype), verbose=verbose, fLOG=fLOG)[name][0]\r\nelse:\r\n    sess = rt.InferenceSession(\"model10.onnx\")\r\n    inputs, outputs = sess.get_inputs(), sess.get_outputs()\r\n    fct = lambda x, verbose=0, fLOG=None: sess.run(\r\n        [outputs[0].name], predict_onnx(x, dtype=dtype))[0][0][0]\r\n\r\n\r\ndata[\"onnx_PredictedValue\"] = \"\"\r\nfor index, row in data.iterrows():\r\n    data.loc[index, \"onnx_PredictedValue\"] = fct(row, verbose=0, fLOG=print)\r\n    if data.loc[index, \"onnx_PredictedValue\"] != data.loc[index, \"skl_PredictedValue\"]:\r\n        d = data.loc[index, \"onnx_PredictedValue\"] - data.loc[index, \"skl_PredictedValue\"]\r\n        if abs(d) > 1e-2:\r\n            print(\"---\", d, ':', data.loc[index, \"onnx_PredictedValue\"], \"<>\",\r\n                  data.loc[index, \"skl_PredictedValue\"])\r\n\r\nprint('----------', data.shape)\r\nprint(data[['skl_PredictedValue', 'onnx_PredictedValue']].head())\r\n\r\nrmse = sqrt(mean_squared_error(data[\"skl_PredictedValue\"], data[\"onnx_PredictedValue\"]))\r\nprint(\"rmse: \" + str(rmse))\r\nrrmse = (rmse/(sum(data[\"skl_PredictedValue\"])/len(data[\"skl_PredictedValue\"])))\r\nprint(\"rrmse: \" + str(rrmse))\r\n\r\ndata.to_csv(R\".\\model10.csv\", index=False)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/638917049/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/641116762",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-641116762",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 641116762,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTExNjc2Mg==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-09T08:19:48Z",
        "updated_at": "2020-06-09T10:30:41Z",
        "author_association": "MEMBER",
        "body": "More information about that… I created a [notebook](http://www.xavierdupre.fr/app/mlprodict/helpsphinx/notebooks/onnx_discrepencies.html) which explains the discrepencies. To summarize: the failing converter is the StandardScaler. scikit-learn does ``(X - mean(X)) / std(X)``, ONNX specifications means ``(X - mean(X)) * (1. / std(X))``. Below a short code measures the maximum difference between the two expressions. The discrepencies can be significant and explain that the path in the decision tree in ONNX and scikit-learn are difference and lead to a different prediction. The probability to observe discrepencies with ONNX depends on  the probability to have significant differences in the two expressions above. The probability is higher is the range of a variable is bigger. I need to see if there exists some float32 *b'* such as ``a / b = a * b'``. The linked notebook proposes three ways to remove discrepencies, two can work with onnxruntime.\r\n\r\n```\r\nimport numpy\r\na1 = numpy.random.randn(100, 2) * 10\r\na2 = a1.copy()\r\na2[:, 1] *= 1000\r\na3 = a1.copy()\r\na3[:, 0] *= 1000\r\n\r\nfor i, a in enumerate([a1, a2, a3]):\r\n    a = a.astype(numpy.float32)\r\n    max_diff32 = numpy.max([\r\n        numpy.abs(numpy.float32(x[0]) / numpy.float32(x[1]) -\r\n            numpy.float32(x[0]) * (numpy.float32(1) / numpy.float32(x[1])))\r\n        for x in a])\r\n    max_diff64 = numpy.max([\r\n        numpy.abs(numpy.float64(x[0]) / numpy.float64(x[1]) -\r\n            numpy.float64(x[0]) * (numpy.float64(1) / numpy.float64(x[1])))\r\n        for x in a])\r\n    print(i, max_diff32, max_diff64)\r\n```\r\noutput:\r\n```\r\n0 1.9073486e-06 1.4210854715202004e-14\r\n1 1.8626451e-09 1.3877787807814457e-17\r\n2 0.0009765625 1.4551915228366852e-11\r\n```\r\n\r\nSee https://stackoverflow.com/questions/35506226/will-the-compiler-optimize-division-into-multiplication.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/641116762/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/641992567",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-641992567",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 641992567,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk5MjU2Nw==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-10T13:04:42Z",
        "updated_at": "2020-06-10T13:04:42Z",
        "author_association": "MEMBER",
        "body": "I finally decided to add more option to sklearn-onnx so that you can fix these discrepencies. It requires two changes, one in your pipeline, one in the conversion but it would look like this (after my PR is merged):\r\n\r\n```\r\nmodel2 = Pipeline([\r\n    ('cast64', CastTransformer(dtype=np.float64)),\r\n    ('scaler', StandardScaler()),\r\n    ('cast', CastTransformer()),\r\n    ('dt', DecisionTreeRegressor(max_depth=max_depth))\r\n])\r\n\r\nonx2 = to_onnx(model2, X_train[:1].astype(np.float32),\r\n               options={StandardScaler: {'div': 'div_cast'}})\r\n```\r\n\r\nSee\r\nhttps://github.com/onnx/sklearn-onnx/pull/481/files#diff-3f667adfc54d12ab9aad2b7f986bcdbb for the full example.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/641992567/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/642341093",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-642341093",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 642341093,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjM0MTA5Mw==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T00:50:17Z",
        "updated_at": "2020-06-11T00:50:17Z",
        "author_association": "NONE",
        "body": "Thanks! I want to share more examples I made with and without StandardScaler. This shows behavior of the remaining discrepancies across 3 factors: range of dependent variable (0to1, 0to100, 0to10000), first step in pipeline (StandardScaler, Passthrough) and number of trees (100, 500, 1000)\r\n![standard_scaler](https://user-images.githubusercontent.com/38173800/84329226-c2decb80-abb6-11ea-8bfa-9d4429d18f8a.JPG)\r\n\r\nI tried to install mlprodict directly from github to try out the new TreeEnsembleRegressorDouble but I'm getting ModuleNotFoundError: No module named 'mlinsights'.\r\n\r\nHere's my code:\r\n`\r\nimport os\r\nimport onnx\r\nimport mlprodict\r\nimport numpy as np\r\nimport pandas as pd\r\nimport onnxruntime as rt\r\nfrom math import sqrt\r\nfrom onnx import helper\r\nfrom mlprodict.onnx_conv import to_onnx\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.metrics import mean_squared_error\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.ensemble import RandomForestRegressor\r\n\r\n\r\ndatasets = [\"sample_0to1.csv\",\r\n            \"sample_0to100.csv\",\r\n            \"sample_0to1000.csv\"]\r\nx_cols = [\r\n    'SegmentTravelTime',\r\n    'NumberOfPassengers',\r\n    'BookingHour',\r\n    'TripFirstTravelDateHour',\r\n    'SegmentFirstTravelDateHour',\r\n    'TripDays',\r\n    'DaysBetweenLoggedandTripDate',\r\n    'DaysBetweenLoggedandSegmentDate',\r\n    'DaysBetweenLoggedandNextFlight',\r\n    'TotalFare'\r\n]\r\ny_cols = ['PredictedValue']\r\nntrees = [100, 500, 1000]\r\n\r\ni = datasets[0]\r\nj = ntrees[0]\r\ndata = pd.read_csv(i)\r\ndata_x = data[x_cols].astype(np.float32)\r\ndata_y = data[y_cols]\r\n\r\nmodel = Pipeline([\r\n    ('prep', ColumnTransformer([\r\n        ('prep1', 'passthrough', x_cols)\r\n    ])),\r\n    ('model', RandomForestRegressor(n_estimators=j))\r\n])\r\nmodel.fit(data_x, data_y)\r\nskl_PredictedValue = pd.DataFrame(model.predict(data_x),\r\n                                  columns=['skl_PredictedValue'])\r\ndata_x = pd.concat([data_x.reset_index(drop=True), skl_PredictedValue],\r\n                   axis=1)\r\n\r\nonnx64 = to_onnx(model, data_x[x_cols][:1].astype(np.float64),\r\n                 dtype=np.float64,\r\n                 rewrite_ops=True)\r\n`",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/642341093/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/642539798",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-642539798",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 642539798,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjUzOTc5OA==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T09:49:21Z",
        "updated_at": "2020-06-11T09:49:21Z",
        "author_association": "MEMBER",
        "body": "Sorry for that, pip install mlinsights should work. I'll fix that in the next release. I mostly use this package to investigate issues with converter, so TreeEnsembleRegressorDouble  is only available in mlprodict but not in onnxruntime. That's why I came up with the CastTransformer. The discrepencies with the passthrough are worrying but it seems related to the same kind of issue. To be more specific, scikit-learn uses a mix of float and double in their implementation that's why there exists a way to have only float in the runtime but it means the onnx node have slightly different threshold than the scikit-learn'one (transformed by the function http://www.xavierdupre.fr/app/mlprodict/helpsphinx/notebooks/onnx_float_double_skl_decision_trees.html#good-threshold). Let me know what you get with TreeEnsembleRegressorDouble.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/642539798/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/651407156",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-651407156",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 651407156,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTQwNzE1Ng==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-29T22:42:24Z",
        "updated_at": "2020-06-29T22:42:24Z",
        "author_association": "NONE",
        "body": "Hi again. I was testing the new CastTransformer. I found that I can't use it as part of a ColumnTransformer because it always expects a numpy array as input. Is this behavior expected? Will it be possible to use CastTransformer as part of a ColumnTransformer?\r\n\r\nMy Code:\r\ni = \"sample_0to1000.csv\"\r\nx_cols = [\r\n    'SegmentTravelTime',\r\n    'NumberOfPassengers',\r\n    'BookingHour',\r\n    'TripFirstTravelDateHour',\r\n    'SegmentFirstTravelDateHour',\r\n    'TripDays',\r\n    'DaysBetweenLoggedandTripDate',\r\n    'DaysBetweenLoggedandSegmentDate',\r\n    'DaysBetweenLoggedandNextFlight',\r\n    'TotalFare'\r\n]\r\ny_cols = ['PredictedValue']\r\nj = 1000\r\n\r\ndata = pd.read_csv(i)\r\ndata_x = data[x_cols].astype(np.float32)\r\ndata_y = data[y_cols]\r\n\r\nmodel = Pipeline([\r\n    ('prep', ColumnTransformer([\r\n        ('prep1', CastTransformer(), x_cols)\r\n    ])),\r\n    ('model', RandomForestRegressor(n_estimators=j))\r\n])\r\nmodel.fit(data_x, data_y)\r\n\r\nThe error:\r\nTypeError: X must be a numpy array.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/651407156/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/651453712",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-651453712",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 651453712,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTQ1MzcxMg==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-30T01:03:14Z",
        "updated_at": "2020-06-30T01:03:14Z",
        "author_association": "NONE",
        "body": "I also verified if there are still discrepancies in the predicted values. Unfortunately, I'm still seeing values as high as 0.009179687500363798. I was expecting to see similar results between DecisionTreeRegressor and RandomForestRegressor.\r\n\r\nsample_0to1000_CastTransformer_DecisionTreeRegressor\r\nrmse: 3.1518419217296634e-06\r\nrrmse: 6.31035072900452e-10\r\nmax(diff): 8.138020848491578e-05\r\n\r\nsample_0to1000_CastTransformer_RandomForestRegressor_1000ntrees\r\nrmse: 0.0026359094428438225\r\nrrmse: 5.287744351426407e-07\r\nmax(diff): 0.009179687500363798\r\n\r\n[CastTransformer_tests.zip](https://github.com/microsoft/onnxruntime/files/4848776/CastTransformer_tests.zip)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/651453712/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/655826308",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-655826308",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 655826308,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1NTgyNjMwOA==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-09T00:30:09Z",
        "updated_at": "2020-07-09T00:30:09Z",
        "author_association": "MEMBER",
        "body": "I fixed the issue with CastTransformer (see https://github.com/xadupre/sklearn-onnx/commit/97b3711c8b9d1ef6705e57b6a3811a56392d9941). I'm not able to replicate your discrepencies. I summarized what I believe is your issue as an example in a tutorial: http://www.xavierdupre.fr/app/onnxcustom/helpsphinx/auto_examples/plot_ebegin_float_double.html.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/655826308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/668919134",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-668919134",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 668919134,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODkxOTEzNA==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-05T01:29:40Z",
        "updated_at": "2020-08-05T01:29:40Z",
        "author_association": "NONE",
        "body": "Thanks for the efforts in fixing this so far. I tried to confirm the effect of adding CastTransformer to the values returned by RandomForestRegressor. Here are the results that I got:\r\n\r\n0to1_NoCast.onnx\r\nrmse: 3.339997169102475e-07\r\nrrmse: 6.77481341700119e-07\r\nmax(diff_NoCast): 6.461143493563526e-07\r\n\r\n0to1_CastTransformer.onnx\r\nrmse: 3.339997169102475e-07\r\nrrmse: 6.77481341700119e-07\r\nmax(diff_CastTransformer): 6.461143493563526e-07\r\n\r\n0to100_NoCast.onnx\r\nrmse: 2.495720024431452e-05\r\nrrmse: 4.918076198512377e-07\r\nmax(diff_NoCast): 0.00011118570962764807\r\n\r\n0to100_CastTransformer.onnx\r\nrmse: 2.495720024431452e-05\r\nrrmse: 4.918076198512377e-07\r\nmax(diff_CastTransformer): 0.00011118570962764807\r\n\r\n0to1000_NoCast.onnx\r\nrmse: 0.002601175999289233\r\nrrmse: 5.198789569426532e-07\r\nmax(diff_NoCast): 0.008893229166460515\r\n\r\n0to1000_CastTransformer.onnx\r\nrmse: 0.002601175999289233\r\nrrmse: 5.198789569426532e-07\r\nmax(diff_CastTransformer): 0.008893229166460515\r\n\r\nIt looks like there is no change in the discrepancies when i added CastTransformer. I am attaching here my codes and the model pairs.\r\n[Testing CastTransformer.zip](https://github.com/microsoft/onnxruntime/files/5025600/Testing.CastTransformer.zip)\r\n\r\nHere are the versions of python packages that i used here:\r\nonnxruntime 1.4.0\r\nskl2onnx 1.7.0\r\nsklearn 0.23.1\r\nAll installations were from Pypi.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/668919134/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/672065978",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-672065978",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 672065978,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjA2NTk3OA==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-11T16:21:03Z",
        "updated_at": "2020-08-11T16:21:03Z",
        "author_association": "MEMBER",
        "body": "I fixed a couple of issues while writing the tutorial. The issue you mentioned about dataframes is already merged in master branch: https://github.com/onnx/sklearn-onnx/commit/46496215a03e2d94e402daa468a235ddbdd904bd. In your data, the predictions with ou without CastTransformer are exactly the same and that's expected because scikit-learn internally casts input in float32 before applying the trees. However, scikit-learn produces double predictions while ONNX produces floats predictions. So I would still expect discrepencies with a relative difference under 1e-6 (difference when a double is cast into a float). We checked the converter was producing predictions with this margin of error but not the exact same predictions.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/672065978/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/672838990",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-672838990",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 672838990,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjgzODk5MA==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-12T12:24:36Z",
        "updated_at": "2020-08-12T12:24:36Z",
        "author_association": "NONE",
        "body": "Thanks for clarifying where the remaining discrepancies are coming from. Given this limitation, we were wondering if you guys have any recommendations regarding what framework to use to avoid this issue but still be able to use ONNX with Random Forest?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/672838990/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/676578273",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-676578273",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 676578273,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU3ODI3Mw==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-19T18:06:21Z",
        "updated_at": "2020-08-19T18:06:21Z",
        "author_association": "MEMBER",
        "body": "I implemented a class CastRegressor which casts the output of any regressor into the expected type (float32).  It works the same way as CastTransformer. Would that work for you?\r\n\r\n```\r\nfrom skl2onnx.sklapi import CastRegressor\r\n\r\nctree = CastRegressor(DecisionTreeRegressor(max_depth=max_depth), dtype=numpy.float32)\r\nctree.fit(Xi_train, yi_train)\r\n\r\nonx6 = to_onnx(ctree, Xi_train[:1].astype(numpy.float32))\r\n\r\nsess6 = InferenceSession(onx6.SerializeToString())\r\n\r\nskl6 = ctree.predict(X32)\r\nort6 = sess6.run(None, {'X': X32})[0]\r\n\r\nprint(diff(skl6, ort6))  #(0.0, 0.0)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/676578273/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/677581254",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-677581254",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 677581254,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzU4MTI1NA==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-20T11:45:02Z",
        "updated_at": "2020-08-20T11:45:02Z",
        "author_association": "NONE",
        "body": "I tested the CastRegressor but it didn't have an impact to the discrepancies. Here are the results that I got:\r\n0to1_CastRegressor.onnx\r\nrmse: 3.339997169102475e-07\r\nrrmse: 6.77481341700119e-07\r\nmax(diff_CastRegressor): 6.461143493563526e-07\r\n\r\n0to100_CastRegressor.onnx\r\nrmse: 2.495720024431452e-05\r\nrrmse: 4.918076198512377e-07\r\nmax(diff_CastRegressor): 0.00011118570962764807\r\n\r\n0to1000_CastRegressor.onnx\r\nrmse: 0.002601175999289233\r\nrrmse: 5.198789569426532e-07\r\nmax(diff_CastRegressor): 0.008893229166460515\r\n\r\nAttaching all relevant files.\r\n[Testing CastRegressor.zip](https://github.com/microsoft/onnxruntime/files/5102695/Testing.CastRegressor.zip)",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/677581254/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/678285788",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-678285788",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 678285788,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODI4NTc4OA==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-21T13:17:31Z",
        "updated_at": "2020-08-21T13:17:31Z",
        "author_association": "MEMBER",
        "body": "Only CastRegressor(DecisionTreeRegressor(max_depth=max_depth), dtype=**numpy.float32**) will fix the discrepencies.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/678285788/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/678855958",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-678855958",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 678855958,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODg1NTk1OA==",
        "user": {
            "login": "lcmanahan",
            "id": 38173800,
            "node_id": "MDQ6VXNlcjM4MTczODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38173800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcmanahan",
            "html_url": "https://github.com/lcmanahan",
            "followers_url": "https://api.github.com/users/lcmanahan/followers",
            "following_url": "https://api.github.com/users/lcmanahan/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcmanahan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcmanahan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcmanahan/subscriptions",
            "organizations_url": "https://api.github.com/users/lcmanahan/orgs",
            "repos_url": "https://api.github.com/users/lcmanahan/repos",
            "events_url": "https://api.github.com/users/lcmanahan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcmanahan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T01:16:03Z",
        "updated_at": "2020-08-24T01:16:03Z",
        "author_association": "NONE",
        "body": "Yup, I noticed that too. I also looked into what the discrepancies look like in GradientBoostingRegressor. Sharing the results and my codes here for your reference:\r\n0to1_DecisionTree.onnx\r\nrmse: 3.8474632833614055e-10\r\nrrmse: 7.780512200933074e-10\r\nmax(diff_DecisionTree): 0.0\r\n\r\n0to1_GradientBoosting.onnx\r\nrmse: 2.4511591950441578e-08\r\nrrmse: 4.9568436704634127e-08\r\nmax(diff_GradientBoosting): 8.58379602397541e-08\r\n\r\n0to1_RandomForest.onnx\r\nrmse: 3.339997169102475e-07\r\nrrmse: 6.77481341700119e-07\r\nmax(diff_RandomForest): 6.461143493563526e-07\r\n\r\n0to100_DecisionTree.onnx\r\nrmse: 4.924753002702599e-08\r\nrrmse: 9.713995764490555e-10\r\nmax(diff_DecisionTree): 0.0\r\n\r\n0to100_GradientBoosting.onnx\r\nrmse: 2.4671227669577828e-06\r\nrrmse: 4.8663598145032524e-08\r\nmax(diff_GradientBoosting): 9.302958062562539e-06\r\n\r\n0to100_RandomForest.onnx\r\nrmse: 2.495720024431452e-05\r\nrrmse: 4.918076198512377e-07\r\nmax(diff_RandomForest): 0.00011118570962764807\r\n\r\n0to1000_DecisionTree.onnx\r\nrmse: 3.1518419217296634e-06\r\nrrmse: 6.31035072900452e-10\r\nmax(diff_DecisionTree): 8.138020848491578e-05\r\n\r\n0to1000_GradientBoosting.onnx\r\nrmse: 0.00026993112344467874\r\nrrmse: 5.40433214580562e-08\r\nmax(diff_GradientBoosting): 0.0007351141066465061\r\n\r\n0to1000_RandomForest.onnx\r\nrmse: 0.002601175999289233\r\nrrmse: 5.198789569426532e-07\r\nmax(diff_RandomForest): 0.008893229166460515\r\n\r\n[Testing Discrepancies across Use Cases of TreeEnsembleRegressor.zip](https://github.com/microsoft/onnxruntime/files/5115279/Testing.Discrepancies.across.Use.Cases.of.TreeEnsembleRegressor.zip)\r\n\r\nAs you can see above, there is one DecisionTreeRegressor (the last one, largest range in dependent variable) that still showed some discrepancy. It is very minimal though.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/678855958/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/679059656",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-679059656",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 679059656,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTA1OTY1Ng==",
        "user": {
            "login": "xadupre",
            "id": 22452781,
            "node_id": "MDQ6VXNlcjIyNDUyNzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22452781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xadupre",
            "html_url": "https://github.com/xadupre",
            "followers_url": "https://api.github.com/users/xadupre/followers",
            "following_url": "https://api.github.com/users/xadupre/following{/other_user}",
            "gists_url": "https://api.github.com/users/xadupre/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xadupre/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xadupre/subscriptions",
            "organizations_url": "https://api.github.com/users/xadupre/orgs",
            "repos_url": "https://api.github.com/users/xadupre/repos",
            "events_url": "https://api.github.com/users/xadupre/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xadupre/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T11:00:19Z",
        "updated_at": "2020-08-24T11:00:19Z",
        "author_association": "MEMBER",
        "body": "Quick question: what do you ``('prep1', CastTransformer(dtype=np.float64), x_cols)])),`` in your code and not ``('prep1', CastTransformer(dtype=np.float32), x_cols)])),``. It would work better with float32. For the random forest, it is another stories. sklearn does an average of double predictions, onnx does the same average with float predictions. *float32( sum_i x_i ) != sum_i ( float64( x_i))*",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/679059656/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/720048997",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-720048997",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 720048997,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDA0ODk5Nw==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-11-01T07:41:58Z",
        "updated_at": "2020-11-01T07:41:58Z",
        "author_association": "NONE",
        "body": "This issue has been automatically marked as stale due to inactivity and will be closed in 7 days if no further activity occurs. If further support is needed, please provide an update and/or more details.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/720048997/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/727718241",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-727718241",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 727718241,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzcxODI0MQ==",
        "user": {
            "login": "stale[bot]",
            "id": 26384082,
            "node_id": "MDM6Qm90MjYzODQwODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stale%5Bbot%5D",
            "html_url": "https://github.com/apps/stale",
            "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2020-11-16T03:47:44Z",
        "updated_at": "2020-11-16T03:47:44Z",
        "author_association": "NONE",
        "body": "This issue has been automatically closed due to inactivity. Please reactivate if further support is needed.\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/727718241/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/901129993",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4130#issuecomment-901129993",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4130",
        "id": 901129993,
        "node_id": "IC_kwDOCVq1mM41ticJ",
        "user": {
            "login": "manuelsilverio",
            "id": 6958958,
            "node_id": "MDQ6VXNlcjY5NTg5NTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6958958?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/manuelsilverio",
            "html_url": "https://github.com/manuelsilverio",
            "followers_url": "https://api.github.com/users/manuelsilverio/followers",
            "following_url": "https://api.github.com/users/manuelsilverio/following{/other_user}",
            "gists_url": "https://api.github.com/users/manuelsilverio/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/manuelsilverio/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/manuelsilverio/subscriptions",
            "organizations_url": "https://api.github.com/users/manuelsilverio/orgs",
            "repos_url": "https://api.github.com/users/manuelsilverio/repos",
            "events_url": "https://api.github.com/users/manuelsilverio/events{/privacy}",
            "received_events_url": "https://api.github.com/users/manuelsilverio/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-18T13:47:41Z",
        "updated_at": "2021-08-18T13:47:41Z",
        "author_association": "NONE",
        "body": "When I use a RandomForestClassifier, my onnx model predicts different values. If I go back to a decision tree classifier then it does not happen. Is it a bug or am I missing anything?",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/901129993/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]