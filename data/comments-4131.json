[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/639256074",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-639256074",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 639256074,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTI1NjA3NA==",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T04:47:28Z",
        "updated_at": "2020-06-05T04:47:28Z",
        "author_association": "MEMBER",
        "body": "Can you just point to a session and when you know the model path instantiate the session ? Right now, this would be hard to achieve given that session construction does a lot of things under the hood with the given model and a constructed session without an associated model isn't much really.\r\n\r\n\"We want to create this session 1x and then infer over and over (vision inspection system).\"\r\n\r\nYou can do this for sure. A session needs to be constructed only once. You can call `Run()` as many times as you want to score the model associated with the session object.  \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/639256074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/640720970",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-640720970",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 640720970,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDcyMDk3MA==",
        "user": {
            "login": "BillMcCrary",
            "id": 5295452,
            "node_id": "MDQ6VXNlcjUyOTU0NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5295452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BillMcCrary",
            "html_url": "https://github.com/BillMcCrary",
            "followers_url": "https://api.github.com/users/BillMcCrary/followers",
            "following_url": "https://api.github.com/users/BillMcCrary/following{/other_user}",
            "gists_url": "https://api.github.com/users/BillMcCrary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BillMcCrary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BillMcCrary/subscriptions",
            "organizations_url": "https://api.github.com/users/BillMcCrary/orgs",
            "repos_url": "https://api.github.com/users/BillMcCrary/repos",
            "events_url": "https://api.github.com/users/BillMcCrary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BillMcCrary/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-08T16:01:52Z",
        "updated_at": "2020-06-08T19:12:55Z",
        "author_association": "NONE",
        "body": "@hariharans29 - Well I remember having tried that before with some errors.  I tried again just now, and hopefully I'm doing something wrong - maybe you can take a look at these snippets and please correct me?  I should disclaim my C++ is a little rusty:\r\n\r\n- In my header where I declare both a pointer and an instance:\r\n`Session* pOrtSession;`\r\n`Session ortSession{ ortEnv, L\"C:/FullPathToSome.onnx\", SessionOptions{ nullptr } };`\r\n\r\n- Here is where I later dynamically change the session model:\r\n`Session ortSession2 = Session(ortEnv, modelPath, SessionOptions{ nullptr });`\r\n`pOrtSession = &ortSession2;`\r\n`ortSession = Session(ortEnv, modelPath, SessionOptions{ nullptr }); `\r\n\r\n- Then when I try to call Run, the instance succeeds but the pointer throws an error:\r\n`ortSession.Run(...)`\r\n`pOrtSession->Run(...)`\r\n\r\n- Error snapshot\r\n![image](https://user-images.githubusercontent.com/5295452/84053018-5463f880-a97f-11ea-9428-6d1f1ec774dc.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/640720970/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643105936",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-643105936",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 643105936,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzEwNTkzNg==",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-12T07:05:01Z",
        "updated_at": "2020-06-12T07:05:01Z",
        "author_association": "MEMBER",
        "body": "What's the reason the class can't have a std::unique_ptr<Session> member with you allocating that when you have the necessary info like the model path, and using that for the Run calls?\r\n\r\nAs for why you get an error, without seeing the full code it's hard to say. pOrtSession was set to the address of ortSession2, but it's not clear if ortSession2 is still in scope when you attempted the pOrtSession->Run call. If it is not, the session it pointed to has been freed. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643105936/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643247250",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-643247250",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 643247250,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzI0NzI1MA==",
        "user": {
            "login": "BillMcCrary",
            "id": 5295452,
            "node_id": "MDQ6VXNlcjUyOTU0NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5295452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BillMcCrary",
            "html_url": "https://github.com/BillMcCrary",
            "followers_url": "https://api.github.com/users/BillMcCrary/followers",
            "following_url": "https://api.github.com/users/BillMcCrary/following{/other_user}",
            "gists_url": "https://api.github.com/users/BillMcCrary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BillMcCrary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BillMcCrary/subscriptions",
            "organizations_url": "https://api.github.com/users/BillMcCrary/orgs",
            "repos_url": "https://api.github.com/users/BillMcCrary/repos",
            "events_url": "https://api.github.com/users/BillMcCrary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BillMcCrary/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-12T12:35:21Z",
        "updated_at": "2020-06-12T12:35:21Z",
        "author_association": "NONE",
        "body": "@hariharans29 & @skottmckay thanks!  That was the issue, working for me now.  It's been 15 years since I used C++ so I'm relearning a lot as I go - I had seen but didn't quite understand the unique_ptr ownership rules until now.  \r\n\r\nFor anyone who sees this, here is the final working bits:\r\n\r\nHeader:\r\n```\r\nunique_ptr<Session> pOrtSession = NULL;\r\n```\r\n\r\nImplementaion:\r\n```\r\nauto uOrtSession = make_unique<Session>(ortEnv, modelPath, SessionOptions{ nullptr });\r\npOrtSession = move(uOrtSession);\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643247250/reactions",
            "total_count": 3,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643450965",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-643450965",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 643450965,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQ1MDk2NQ==",
        "user": {
            "login": "hariharans29",
            "id": 9969784,
            "node_id": "MDQ6VXNlcjk5Njk3ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9969784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hariharans29",
            "html_url": "https://github.com/hariharans29",
            "followers_url": "https://api.github.com/users/hariharans29/followers",
            "following_url": "https://api.github.com/users/hariharans29/following{/other_user}",
            "gists_url": "https://api.github.com/users/hariharans29/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hariharans29/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hariharans29/subscriptions",
            "organizations_url": "https://api.github.com/users/hariharans29/orgs",
            "repos_url": "https://api.github.com/users/hariharans29/repos",
            "events_url": "https://api.github.com/users/hariharans29/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hariharans29/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-12T19:37:40Z",
        "updated_at": "2020-06-12T19:37:40Z",
        "author_association": "MEMBER",
        "body": "Thanks for letting us know ! :) ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/643450965/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/659245221",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-659245221",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 659245221,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTI0NTIyMQ==",
        "user": {
            "login": "hcfeng201",
            "id": 34930362,
            "node_id": "MDQ6VXNlcjM0OTMwMzYy",
            "avatar_url": "https://avatars.githubusercontent.com/u/34930362?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hcfeng201",
            "html_url": "https://github.com/hcfeng201",
            "followers_url": "https://api.github.com/users/hcfeng201/followers",
            "following_url": "https://api.github.com/users/hcfeng201/following{/other_user}",
            "gists_url": "https://api.github.com/users/hcfeng201/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hcfeng201/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hcfeng201/subscriptions",
            "organizations_url": "https://api.github.com/users/hcfeng201/orgs",
            "repos_url": "https://api.github.com/users/hcfeng201/repos",
            "events_url": "https://api.github.com/users/hcfeng201/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hcfeng201/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-16T08:23:58Z",
        "updated_at": "2020-07-16T08:24:57Z",
        "author_association": "NONE",
        "body": "> @hariharans29 & @skottmckay thanks! That was the issue, working for me now. It's been 15 years since I used C++ so I'm relearning a lot as I go - I had seen but didn't quite understand the unique_ptr ownership rules until now.\r\n> \r\n> For anyone who sees this, here is the final working bits:\r\n> \r\n> Header:\r\n> \r\n> ```\r\n> unique_ptr<Session> pOrtSession = NULL;\r\n> ```\r\n> \r\n> Implementaion:\r\n> \r\n> ```\r\n> auto uOrtSession = make_unique<Session>(ortEnv, modelPath, SessionOptions{ nullptr });\r\n> pOrtSession = move(uOrtSession);\r\n> ```\r\n\r\nHi,\r\n    I try to implement it like you did，but got en error.\r\nheader:\r\n```\r\nstd::unique_ptr<Ort::Session> onnx_session_ = NULL;\r\nOrt::Env *env_;\r\n```\r\nImplementaion:\r\n``` \r\nbool loadONNX() {\r\n        const char* onnx_model_path_ = \"model/melgan_dynamic.onnx\";\r\n        Ort::Env env_(ORT_LOGGING_LEVEL_ERROR, \"test\");\r\n        Ort::SessionOptions session_options;\r\n        session_options.SetIntraOpNumThreads(1);\r\n        session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);\r\n        auto uOrtSession = std::make_unique<Ort::Session>(env_, onnx_model_path_, session_options);\r\n        onnx_session_ = std::move(uOrtSession);\r\n        return ture;\r\n}\r\nvoid RunONNXSession(std::vector<float> &onnx_input_tensor, std::vector<int64_t> &onnx_input_node_dims_, short \r\n                               *body_data, int64_t &out_size) {\r\n        const char* input_names[] = {\"input\"};\r\n        const char* output_names[] = {\"output\"};\r\n        auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);\r\n        size_t input_tensor_size = onnx_input_node_dims_[0] * onnx_input_node_dims_[1] * onnx_input_node_dims_[2];\r\n        Ort::Value input_tensor = Ort::Value::CreateTensor<float>(memory_info, onnx_input_tensor.data(), input_tensor_size, \r\n                                                              onnx_input_node_dims_.data(), 3);\r\n        auto output_tensors = onnx_session_->Run(Ort::RunOptions{nullptr}, input_names, &input_tensor, 1, output_names, 1);\r\n        ...\r\n} \r\n```\r\n    \r\n    \r\n![image](https://user-images.githubusercontent.com/34930362/87645042-8424ce00-c77f-11ea-9f55-5d50c161afd8.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/659245221/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/663633245",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-663633245",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 663633245,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzYzMzI0NQ==",
        "user": {
            "login": "goksinan",
            "id": 36628896,
            "node_id": "MDQ6VXNlcjM2NjI4ODk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/36628896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goksinan",
            "html_url": "https://github.com/goksinan",
            "followers_url": "https://api.github.com/users/goksinan/followers",
            "following_url": "https://api.github.com/users/goksinan/following{/other_user}",
            "gists_url": "https://api.github.com/users/goksinan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goksinan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goksinan/subscriptions",
            "organizations_url": "https://api.github.com/users/goksinan/orgs",
            "repos_url": "https://api.github.com/users/goksinan/repos",
            "events_url": "https://api.github.com/users/goksinan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goksinan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-24T16:52:24Z",
        "updated_at": "2020-07-27T14:34:07Z",
        "author_association": "NONE",
        "body": "@hariharans29  If I use a pointer, I still get the following error when I do `session->Run(...) `\r\n\r\n```\r\n[E:onnxruntime:, sequential_executor.cc:309 onnxruntime::SequentialExecutor::Execute] Non-zero status code returned while running Conv node. Name:'Conv_0' Status Message: Attempt to use DefaultLogger but none has been registered.\r\n```\r\n\r\nHowever, I don't get an error if I load and run the model [`session.Run(...)`] inside the same function.\r\nI would appreciate any feedback.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/663633245/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/682796289",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-682796289",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 682796289,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mjc5NjI4OQ==",
        "user": {
            "login": "arbasli2",
            "id": 21242845,
            "node_id": "MDQ6VXNlcjIxMjQyODQ1",
            "avatar_url": "https://avatars.githubusercontent.com/u/21242845?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arbasli2",
            "html_url": "https://github.com/arbasli2",
            "followers_url": "https://api.github.com/users/arbasli2/followers",
            "following_url": "https://api.github.com/users/arbasli2/following{/other_user}",
            "gists_url": "https://api.github.com/users/arbasli2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arbasli2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arbasli2/subscriptions",
            "organizations_url": "https://api.github.com/users/arbasli2/orgs",
            "repos_url": "https://api.github.com/users/arbasli2/repos",
            "events_url": "https://api.github.com/users/arbasli2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arbasli2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-28T16:06:20Z",
        "updated_at": "2020-08-28T16:06:20Z",
        "author_association": "NONE",
        "body": "> Hi,\r\n> I try to implement it like you did，but got en error.\r\n> header:\r\n> \r\n> ```\r\n> std::unique_ptr<Ort::Session> onnx_session_ = NULL;\r\n> Ort::Env *env_;\r\n> ```\r\n> \r\n> Implementaion:\r\n> \r\n> ```\r\n> bool loadONNX() {\r\n>         const char* onnx_model_path_ = \"model/melgan_dynamic.onnx\";\r\n>         Ort::Env env_(ORT_LOGGING_LEVEL_ERROR, \"test\");\r\n\r\nIt seems since you have used `env` variable to create the session when it goes out of scope, it creates error when you use the session. so for me it worked when I did  the same trick to the `env`  as is suggested for `session` variable, i.e. defined it as a unique pointer and then moved the local `env` to this class member:\r\n\r\nin header: \r\n\r\n    std::unique_ptr<Ort::Session> session= nullptr;\r\n    std::unique_ptr < Ort::Env> env = nullptr;\r\n\r\nin the constructor of my class:\r\n\r\n    Ort::SessionOptions session_options{nullptr};\r\n    auto envLocal = std::make_unique<Ort::Env>(ORT_LOGGING_LEVEL_WARNING, \"test\");\r\n    env = std::move(envLocal);\r\n    auto sessionLocal = std::make_unique<Ort::Session>(*env, model_path, session_options);\r\n    session = std::move(sessionLocal);\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/682796289/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/682832271",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/4131#issuecomment-682832271",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/4131",
        "id": 682832271,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjgzMjI3MQ==",
        "user": {
            "login": "goksinan",
            "id": 36628896,
            "node_id": "MDQ6VXNlcjM2NjI4ODk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/36628896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/goksinan",
            "html_url": "https://github.com/goksinan",
            "followers_url": "https://api.github.com/users/goksinan/followers",
            "following_url": "https://api.github.com/users/goksinan/following{/other_user}",
            "gists_url": "https://api.github.com/users/goksinan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/goksinan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/goksinan/subscriptions",
            "organizations_url": "https://api.github.com/users/goksinan/orgs",
            "repos_url": "https://api.github.com/users/goksinan/repos",
            "events_url": "https://api.github.com/users/goksinan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/goksinan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-28T16:24:01Z",
        "updated_at": "2020-08-28T16:24:01Z",
        "author_association": "NONE",
        "body": "I just figured out the same thing two days ago :) As you said, when the initialization function goes out of scope, `session->run()` gives an error when you call it from another member function. But in my case, I also had to run the model once right after initialization to eliminate all the errors. In other words, I created the session, also created a dummy input, and ran the session using this dummy input (all inside the same function).\r\n\r\nInterestingly, the above trick (using unique pointer for Ort::Env) is not necessary if you download and use a model from the Onnx model zoo. I tested `squeezenet.onnx` and it worked just fine. So, I am still thinking that there might be a bug that causes all of this.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/682832271/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]