[
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/885068011",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/8464#issuecomment-885068011",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/8464",
        "id": 885068011,
        "node_id": "IC_kwDOCVq1mM40wRDr",
        "user": {
            "login": "snnn",
            "id": 856316,
            "node_id": "MDQ6VXNlcjg1NjMxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/snnn",
            "html_url": "https://github.com/snnn",
            "followers_url": "https://api.github.com/users/snnn/followers",
            "following_url": "https://api.github.com/users/snnn/following{/other_user}",
            "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/snnn/subscriptions",
            "organizations_url": "https://api.github.com/users/snnn/orgs",
            "repos_url": "https://api.github.com/users/snnn/repos",
            "events_url": "https://api.github.com/users/snnn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/snnn/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-22T17:00:04Z",
        "updated_at": "2021-07-22T17:00:04Z",
        "author_association": "MEMBER",
        "body": "ORT_NO_EXCEPTIONS was added for non-Windows mobile devices. DML is only available on Windows.  So we didn't try to make it work.  We use C++ exception as much possible. We only disable it when we have to. ",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/885068011/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/889791274",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/8464#issuecomment-889791274",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/8464",
        "id": 889791274,
        "node_id": "IC_kwDOCVq1mM41CSMq",
        "user": {
            "login": "fdwr",
            "id": 1809166,
            "node_id": "MDQ6VXNlcjE4MDkxNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1809166?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdwr",
            "html_url": "https://github.com/fdwr",
            "followers_url": "https://api.github.com/users/fdwr/followers",
            "following_url": "https://api.github.com/users/fdwr/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdwr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdwr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdwr/subscriptions",
            "organizations_url": "https://api.github.com/users/fdwr/orgs",
            "repos_url": "https://api.github.com/users/fdwr/repos",
            "events_url": "https://api.github.com/users/fdwr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdwr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T10:13:34Z",
        "updated_at": "2021-07-30T10:13:34Z",
        "author_association": "MEMBER",
        "body": "@gineshidalgo99 : The DML EP was written with standard C++ in mind from the beginning, which includes exceptions, and converting it from exceptions to return codes would be prohibitive at this point, given I count at least 250 occurrences of `THROW_HR_IF`/`THROW_IF_FAILED` just in the DML EP codebase. I wonder, are you statically linking ORT into a large component? If not, keeping it as a separate DLL/SO and using the C interface would avoid exceptions spanning the module boundary. I also wonder what your desired behavior upon exceptions is, given they can happen for a number of reasons, beyond the very rare case of running out of physical memory. Some laptops with can switch between discrete/on-board GPU's which cause a device removed, and would you want the entire process to `abort` just because of that? ðŸ¤”",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/889791274/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/895111173",
        "html_url": "https://github.com/microsoft/onnxruntime/issues/8464#issuecomment-895111173",
        "issue_url": "https://api.github.com/repos/microsoft/onnxruntime/issues/8464",
        "id": 895111173,
        "node_id": "IC_kwDOCVq1mM41WlAF",
        "user": {
            "login": "skottmckay",
            "id": 979079,
            "node_id": "MDQ6VXNlcjk3OTA3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/979079?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skottmckay",
            "html_url": "https://github.com/skottmckay",
            "followers_url": "https://api.github.com/users/skottmckay/followers",
            "following_url": "https://api.github.com/users/skottmckay/following{/other_user}",
            "gists_url": "https://api.github.com/users/skottmckay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skottmckay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skottmckay/subscriptions",
            "organizations_url": "https://api.github.com/users/skottmckay/orgs",
            "repos_url": "https://api.github.com/users/skottmckay/repos",
            "events_url": "https://api.github.com/users/skottmckay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skottmckay/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T10:22:33Z",
        "updated_at": "2021-08-09T10:22:33Z",
        "author_association": "MEMBER",
        "body": "@fdwr We converted the ORT codebase to support the mobile build with exceptions disabled by creating a few macros to wrap existing exception handling, so as long as there aren't too many try/catch blocks it's most likely possible to support a build with exceptions disabled mainly by updating your THROW_* macros. FWIW the most significant trick is when the catch block does something meaningful (need to capture that in a lambda so it compiles cleanly in a build with exceptions disabled). See https://github.com/microsoft/onnxruntime/search?q=ORT_HANDLE_EXCEPTION for usage examples.\r\n\r\nHowever, in a scenario where DML is being used I wouldn't expect it to be necessary to disable exceptions in a custom build, as the binary size saving isn't meaningful enough to justify the effort and loss of graceful exception handling by having to use abort. I will close this issue due to those reasons.",
        "reactions": {
            "url": "https://api.github.com/repos/microsoft/onnxruntime/issues/comments/895111173/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]